<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
    <!-- ==================== -->
    <!--      扫描加载Bean     -->
    <!-- ==================== -->
    <context:component-scan base-package="com.company.project.dao"
                            use-default-filters="true">
    </context:component-scan>
    <!-- ==================== -->
    <!--      加载配置文件     -->
    <!-- ==================== -->
    <!-- 【一】 -->
    <!--<util:properties id="config" location="classpath*:*.properties"/>-->
    <!-- 【二】 -->
    <!--<context:property-placeholder location="classpath*:*.properties" ignore-unresolvable="true"/>-->
    <!-- ==================== -->
    <!--        AOP           -->
    <!-- ==================== -->
    <!-- 【一】 -->
    <bean id="myBeforeAdvice" class="com.company.project.support.aop.MyBeforeAdvice"/>
    <bean class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces">
            <value>com.company.project.service.UserService</value>
        </property>
        <property name="target">
            <bean class="com.company.project.service.UserServiceImpl"/>
        </property>
        <property name="interceptorNames">
            <list>
                <value>myBeforeAdvice</value>
            </list>
        </property>
    </bean>
    <!-- 【二】 -->
    <!-- 【三】 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
    </bean>
    <!-- 【四】 -->
    <bean id="monitor" class="com.company.project.support.aop.Monitor"/>
    <bean id="logger" class="com.company.project.support.aop.Logger"/>
    <aop:config>
        <aop:pointcut id="myPointCut" expression="execution(public * com.company.project.service..*.*(..))"/>
        <aop:aspect ref="monitor" order="6">
            <aop:before method="doBefore" pointcut-ref="myPointCut"/>
            <aop:after method="doAfter" pointcut-ref="myPointCut"/>
            <aop:after-throwing method="doAfterThrowing" pointcut-ref="myPointCut"/>
            <aop:after-returning method="doAfterReturning" pointcut-ref="myPointCut"/>
            <aop:around method="doAround" pointcut-ref="myPointCut"/>
        </aop:aspect>
        <aop:aspect ref="logger" order="3">
            <aop:before method="doBefore" pointcut-ref="myPointCut"/>
        </aop:aspect>
    </aop:config>
    <!-- 【五】 -->
    <bean class="com.company.project.support.aop.MyAspect"/>
    <aop:aspectj-autoproxy/>
    <!-- ==================== -->
    <!--        扩展点        -->
    <!-- ==================== -->
    <!-- ==================== -->
    <!--      集成RabbitMQ    -->
    <!-- ==================== -->
    <!-- 连接 -->
    <rabbit:connection-factory id="connectionFactory" addresses="${rabbit.mq.server}"
                               username="${rabbit.mq.username}" password="${rabbit.mq.password}"
                                publisher-confirms="true" publisher-returns="true"/>
    <!-- 生产者 -->
    <!-- 交换器 -->
    <rabbit:direct-exchange name="my_direct_exchange" id="my_direct_exchange"
                            durable="true" auto-delete="false" auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding key="my_routing_key" queue="my_queue"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>
    <!--<rabbit:topic-exchange name="topicExchange">
    </rabbit:topic-exchange>
    <rabbit:fanout-exchange name="fanoutExchange">
    </rabbit:fanout-exchange>-->
    <!-- 队列 -->
    <rabbit:queue name="my_queue" id="my_queue"
                  durable="true" auto-delete="false" exclusive="false" auto-declare="true">
    </rabbit:queue>
    <!-- 模板 -->
    <bean id="rabbitConfirmCallback" class="com.company.project.support.mq.RabbitConfirmCallback" />
    <bean id="rabbitReturnCallback" class="com.company.project.support.mq.RabbitReturnCallback" />
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"
                     exchange="my_direct_exchange" routing-key="my_routing_key"
                     confirm-callback="rabbitConfirmCallback" return-callback="rabbitReturnCallback">
    </rabbit:template>

    <!-- 消费者 -->
    <!--<bean id="demoMessageListener" class="com.company.project.support.mq.DemoMessageListener"/>-->
    <!--<rabbit:listener-container connection-factory="connectionFactory">-->
        <!--<rabbit:listener queues="my_queue" ref="demoMessageListener"/>-->
    <!--</rabbit:listener-container>-->
</beans>